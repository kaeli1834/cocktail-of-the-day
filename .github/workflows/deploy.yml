name: 🚀 CI/CD - Cocktail of the Day

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "*.md"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: "Skip tests"
        required: false
        default: false
        type: boolean

# Évite les déploiements concurrents
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'production' }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  deployments: write

env:
  REGISTRY: ghcr.io
  IMAGE_API: ghcr.io/${{ github.repository }}/cocktail-api
  IMAGE_FRONT: ghcr.io/${{ github.repository }}/cocktail-front

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            cocktail-api/package-lock.json
            cocktail-front/package-lock.json

      - name: Test API
        run: |
          cd cocktail-api
          npm ci
          npm run test || echo "No tests configured for API"

      - name: Test Frontend
        run: |
          cd cocktail-front
          npm ci
          npm run test || echo "No tests configured for Frontend"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && needs.security-scan.result == 'success'
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      front-image: ${{ steps.meta-front.outputs.tags }}
      api-digest: ${{ steps.build-api.outputs.digest }}
      front-digest: ${{ steps.build-front.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- API Metadata ----------
      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Cocktail API
            org.opencontainers.image.description=Backend API for Cocktail of the Day
            org.opencontainers.image.vendor=CocktailApp

      # ---------- API Build ----------
      - name: Build & Push API image
        id: build-api
        uses: docker/build-push-action@v6
        with:
          context: ./cocktail-api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api
          build-args: |
            NODE_ENV=production

      # ---------- Frontend Metadata ----------
      - name: Extract Frontend metadata
        id: meta-front
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FRONT }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Cocktail Frontend
            org.opencontainers.image.description=React frontend for Cocktail of the Day
            org.opencontainers.image.vendor=CocktailApp

      # ---------- Frontend Build ----------
      - name: Build & Push Frontend image
        id: build-front
        uses: docker/build-push-action@v6
        with:
          context: ./cocktail-front
          file: ./cocktail-front/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-front.outputs.tags }}
          labels: ${{ steps.meta-front.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            VITE_API_URL=http://localhost:3000

  deploy:
    name: 🚀 Deploy (API + Front) - Single Domain with /api
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            APP_DIR="${{ secrets.COCKTAIL_PATH }}"              # ex: /srv/cocktail-of-the-day
            CADDY_ROOT="${{ secrets.SSH_CADDY_ROOT }}"          # ex: /srv/caddy
            DOMAIN="${{ secrets.COCKTAIL_DOMAIN }}"             # ex: cocktail.getkaeli.com

            # -------- Compose prod minimal (images uniquement) --------
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            cat > compose.cocktail.prod.yml <<'EOF'
            version: "3.9"
            name: cocktail
            networks:
              caddy_net:
                external: true
            services:
              cocktail-api:
                image: ghcr.io/${{ github.repository }}/cocktail-api:latest
                container_name: cocktail-api
                restart: unless-stopped
                expose:
                  - "3000"
                environment:
                  NODE_ENV: production
                healthcheck:
                  test: ["CMD", "wget", "-qO-", "http://127.0.0.1:3000/api/health"]
                  interval: 20s
                  timeout: 5s
                  retries: 5
                networks: [ caddy_net ]
                logging:
                  driver: json-file
                  options: { max-size: "10m", max-file: "3" }

              cocktail-front:
                image: ghcr.io/${{ github.repository }}/cocktail-front:latest
                container_name: cocktail-front
                restart: unless-stopped
                # NOTE: change "8080" -> "80" if your Nginx listens on 80
                expose:
                  - "8080"
                environment:
                  NODE_ENV: production
                healthcheck:
                  test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8080/health || wget -qO- http://127.0.0.1:8080/"]
                  interval: 20s
                  timeout: 5s
                  retries: 5
                networks: [ caddy_net ]
                logging:
                  driver: json-file
                  options: { max-size: "10m", max-file: "3" }
            EOF

            # (Si GHCR privé) login:
            # echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

            docker compose -f compose.cocktail.prod.yml pull
            docker compose -f compose.cocktail.prod.yml up -d
            docker compose -f compose.cocktail.prod.yml ps

            # -------- Mise à jour du Caddyfile (un seul domaine + /api) --------
            CADDY_FILE="$CADDY_ROOT/Caddyfile"
            TS="$(date +%Y%m%d_%H%M%S)"
            cp "$CADDY_FILE" "$CADDY_FILE.bak.$TS"

            # Supprimer l'ancien bloc marqué (idempotent)
            sed -i '/# >>> cocktail BEGIN >>>/,/# <<< cocktail END <<</d' "$CADDY_FILE"

            # Ajouter le nouveau bloc
            # NOTE: change :8080 -> :80 si ton Nginx écoute 80
            cat >> "$CADDY_FILE" <<EOF
            # >>> cocktail BEGIN >>>
            ${DOMAIN} {
                encode zstd gzip

                @api path /api/*
                handle @api {
                    reverse_proxy cocktail-api:3000
                }

                handle {
                    reverse_proxy cocktail-front:8080
                }

                header {
                    Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
                    X-Frame-Options "DENY"
                    X-Content-Type-Options "nosniff"
                    Referrer-Policy "strict-origin-when-cross-origin"
                    Permissions-Policy "geolocation=(), microphone=()"
                }
            }
            # <<< cocktail END <<<
            EOF

            # -------- Valider & recharger Caddy --------
            if docker compose -f "$CADDY_ROOT/docker-compose.yml" ps | grep -q caddy; then
              docker compose -f "$CADDY_ROOT/docker-compose.yml" exec -T caddy caddy validate --config /etc/caddy/Caddyfile
              docker compose -f "$CADDY_ROOT/docker-compose.yml" exec -T caddy caddy reload --config /etc/caddy/Caddyfile
            else
              docker compose -f "$CADDY_ROOT/docker-compose.yml" up -d caddy
              # petite marge pour que caddy démarre
              sleep 5
              docker compose -f "$CADDY_ROOT/docker-compose.yml" exec -T caddy caddy validate --config /etc/caddy/Caddyfile
              docker compose -f "$CADDY_ROOT/docker-compose.yml" exec -T caddy caddy reload --config /etc/caddy/Caddyfile
            fi

            echo "✅ Deploy OK — Caddy reloaded with single-domain /api routing"
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
