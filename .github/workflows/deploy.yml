deploy:
  name: ðŸš€ Deploy (API + Front)
  needs: build-and-push
  runs-on: ubuntu-latest
  steps:
    - name: Deploy on server
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          set -euo pipefail
          APP_DIR="${{ secrets.COCKTAIL_PATH }}"   # ex: /srv/cocktail
          CADDY_ROOT="${{ secrets.SSH_CADDY_ROOT }}"  # ex: /srv/caddy
          API_DOMAIN="${{ secrets.COCKTAIL_API_DOMAIN }}"     # ex: api.cocktail.getkaeli.com
          FRONT_DOMAIN="${{ secrets.COCKTAIL_FRONT_DOMAIN }}" # ex: cocktail.getkaeli.com

          mkdir -p "$APP_DIR"
          cd "$APP_DIR"

          # (Option) rÃ©gÃ©nÃ©rer le compose si tu prÃ©fÃ¨res pilotÃ© par CI
          cat > compose.cocktail.prod.yml <<'EOF'
          version: "3.8"
          networks:
            web:
              external: true
          services:
            cocktail-api:
              image: ghcr.io/${{ github.repository }}/cocktail-api:latest
              container_name: cocktail-api
              restart: unless-stopped
              expose: ["3000"]
              environment:
                NODE_ENV: production
              healthcheck:
                test: ["CMD", "wget", "-qO-", "http://127.0.0.1:3000/health || exit 1"]
                interval: 30s
                timeout: 5s
                retries: 3
              networks: [web]
              logging:
                driver: json-file
                options: { max-size: "10m", max-file: "3" }
            cocktail-front:
              image: ghcr.io/${{ github.repository }}/cocktail-front:latest
              container_name: cocktail-front
              restart: unless-stopped
              expose: ["8080"]
              environment:
                NODE_ENV: production
              healthcheck:
                test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8080/ || exit 1"]
                interval: 30s
                timeout: 5s
                retries: 3
              networks: [web]
              logging:
                driver: json-file
                options: { max-size: "10m", max-file: "3" }
          EOF

          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker compose -f compose.cocktail.prod.yml pull
          docker compose -f compose.cocktail.prod.yml up -d
          docker compose -f compose.cocktail.prod.yml ps

          # ðŸ”§ MAJ Caddy (ajout/MAJ des 2 blocs avec marqueurs)
          CADDY_FILE="$CADDY_ROOT/Caddyfile"
          TS="$(date +%Y%m%d_%H%M%S)"
          cp "$CADDY_FILE" "$CADDY_FILE.bak.$TS"

          # Supprimer anciens blocs (idempotent)
          for NAME in "cocktail-api" "cocktail-front"; do
            sed -i "/# >>> $NAME BEGIN >>>/,/# <<< $NAME END <<</d" "$CADDY_FILE"
          done

          # Ajouter bloc API
          cat >> "$CADDY_FILE" <<EOF
          # >>> cocktail-api BEGIN >>>
          ${API_DOMAIN} {
            reverse_proxy cocktail-api:3000
            encode zstd gzip
            header {
              X-Frame-Options "DENY"
              X-Content-Type-Options "nosniff"
              Referrer-Policy "no-referrer"
              Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
            }
          }
          # <<< cocktail-api END <<<
          EOF

          # Ajouter bloc FRONT
          cat >> "$CADDY_FILE" <<EOF
          # >>> cocktail-front BEGIN >>>
          ${FRONT_DOMAIN} {
            reverse_proxy cocktail-front:8080
            encode zstd gzip
            header {
              X-Frame-Options "DENY"
              X-Content-Type-Options "nosniff"
              Referrer-Policy "no-referrer"
              Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
            }
          }
          # <<< cocktail-front END <<<
          EOF

          # Valider et recharger Caddy
          docker compose -f "$CADDY_ROOT/docker-compose.yml" exec -T caddy caddy validate --config /etc/caddy/Caddyfile
          # si caddy n'est pas Up, le dÃ©marrer
          if ! docker ps --filter "name=caddy" --filter "status=running" | grep -q caddy; then
            docker compose -f "$CADDY_ROOT/docker-compose.yml" up -d caddy
            sleep 5
          fi
          docker compose -f "$CADDY_ROOT/docker-compose.yml" exec -T caddy caddy reload --config /etc/caddy/Caddyfile

          echo "âœ… Deploy + Caddy reload OK"
